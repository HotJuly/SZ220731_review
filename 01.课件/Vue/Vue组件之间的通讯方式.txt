1.props
	适用场景:父子之间

	父向子:
		1.父组件在子组件的标签上,添加标签属性,将需要传递的数据作为属性值向下传递

		2.子组件在自己的配置对象中,添加props配置选项,用于声明想要接收哪些标签属性

		父给子的是数据本身

	子向父:
		1.父组件在子组件的标签上,添加标签属性,将需要接收的数据的函数作为属性值向下传递
			注意:函数必须声明在父组件的methods中才可以
				原因是,因为methods中,所有的方法的this都会被bind强行修改为父组件的实例对象

		2.子组件在自己的配置对象中,添加props配置选项,用于声明想要接收哪些标签属性

		3.子组件调用接收到的函数,并向内部传入参数

		4.最终传入的数据会触发父组件methods中的函数,实现子向父传输数据的过程

		父给子的是接收数据的函数
				

2.provide/inject
	适用场景:祖孙组件

	1.祖先组件,在自己的配置对象中,添加provide属性,并将需要暴露的数据放入该对象中
		注意:如果想要把data中的数据暴露出去,provide必须写成函数形式

	2.后代组件,在自己的配置对象中,添加inejct属性,并在数组中声明需要接收的属性即可

	注意:provide暴露的数据是非响应式的
		如果想要将数据变成响应式的,可以将数据先放入data中处理,然后在用provide暴露出去


3.自定义事件

	问题:请问什么是原生事件?什么是自定义事件
		原生事件->其实指的就是浏览器的标准事件机制
				他的标准是W3C推出的,例如input标签具有哪些事件这件事情是W3C制定的

		自定义事件->其实自定义事件是Vue推出的一套事件机制
				他的事件名是由开发者指定的,可以使用@符或者$on都可以绑定自定义事件,使用$emit可以触发自定义事件

		如何区分原生事件和自定义事件?
			如果是在原生DOM标签上,绑定的事件,那么这个事件一定是原生事件
			如果是在组件标签上,绑定的事件,那么这个事件就是自定义事件
				如果在绑定自定义事件的时候,加上了修饰符.native,那么这个事件就会变成原生事件,并绑定给当前组件的根DOM节点使用

	$on->该方法可以给指定的组件实例绑定自定义事件,并添加事件处理器
	$once->该方法也可以给指定的组件实例绑定自定义事件,并添加事件处理器,
			但是该事件只能触发一次,触发之后会自动解绑
	$emit->该方法可以触发某个组件实例身上的某类自定义事件
	$off->该方法可以解绑自定义事件
		如果不传入任何参数->解绑当前组件实例身上所有的事件
		如果只传入一个参数->解绑当前组件实例身上指定的事件的所有事件处理器
		如果传入两个参数->解绑当前组件实例身上指定的事件的指定事件处理器

	v-model
		对input框使用
			1.将data中的状态数据,作为input框的默认值进行展示(属性名是value)
    				<input type="text" :value="msg">

			2.当用户在input框中输入数据的时候,会自动修改data中对应的状态数据
    				<input type="text" :value="msg" @input="(event)=>msg=event.target.value">

		对组件使用			
			1.将data中的状态数据,作为组件的标签属性传递给子组件(默认属性名是value)
    				<HelloWorld :value="msg"/>

			2.给子组件绑定自定义事件,用来让子组件向父组件传递数据,修改对应的状态数据(默认事件名是input)
    				<HelloWorld :value="msg" @input="(data)=>msg=data"/>
			
			注意:可以通过model配置选项,自定义父组件使用v-model传下来的属性名和事件名

4.找到对应组件的实例对象
	$parent->可以获取到父组件的组件实例对象
	$root->可以获取到当前组件树的根组件实例对象
	$children->可以获取到子组件实例对象组成的数组
		注意:
			1.如果没有异步组件存在的情况下,该数组的排列顺序,与子组件挂载顺序相同

			2.不要操作这个数组内部的排列顺序,他对页面没有任何影响

	$refs->可以获取到组件template中标签组成的内容
		该属性必须和标签属性ref配合
		ref对原生标签使用
			可以获取到当前标签的原生DOM节点
		ref对组件标签使用
			可以获取到组件标签的组件实例对象






































